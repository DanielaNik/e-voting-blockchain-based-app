{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\danie\\\\truffleProjects\\\\ElectionSystem\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\danie\\\\truffleProjects\\\\ElectionSystem\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\danie\\\\truffleProjects\\\\ElectionSystem\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\danie\\\\truffleProjects\\\\ElectionSystem\\\\src\\\\components\\\\VotingContext.js\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport Voting from '../truffle_abis/Voting.json';\nexport var VotingContext = createContext();\nexport function useVotingContext() {\n  return useContext(VotingContext);\n} // Define a new context to manage the voting status\n\nvar VotingStatusContext = createContext(); // Function to fetch and manage user voting status\n\nexport function fetchUserVotingStatus(_x) {\n  return _fetchUserVotingStatus.apply(this, arguments);\n}\n\nfunction _fetchUserVotingStatus() {\n  _fetchUserVotingStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account) {\n    var web3, networkId, votingData, votingContract, voterDetails, userHasVoted;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            web3 = new Web3(window.ethereum);\n            _context2.next = 4;\n            return web3.eth.net.getId();\n\n          case 4:\n            networkId = _context2.sent;\n            votingData = Voting.networks[networkId];\n            votingContract = new web3.eth.Contract(Voting.abi, votingData.address);\n            _context2.next = 9;\n            return votingContract.methods.getVoterDetails(account).call();\n\n          case 9:\n            voterDetails = _context2.sent;\n            userHasVoted = voterDetails.hasVoted;\n            return _context2.abrupt(\"return\", userHasVoted);\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(\"Error fetching user's voting status:\", _context2.t0);\n            return _context2.abrupt(\"return\", false);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 14]]);\n  }));\n  return _fetchUserVotingStatus.apply(this, arguments);\n}\n\nexport function VotingProvider(_ref) {\n  var children = _ref.children,\n      account = _ref.account;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      voting = _useState2[0],\n      setVoting = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userHasVoted = _useState4[0],\n      setUserHasVoted = _useState4[1];\n\n  useEffect(function () {\n    var loadVotingContract = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3, networkId, votingData, votingContract, status;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                web3 = new Web3(window.ethereum);\n                _context.next = 4;\n                return web3.eth.net.getId();\n\n              case 4:\n                networkId = _context.sent;\n                votingData = Voting.networks[networkId];\n\n                if (!votingData) {\n                  _context.next = 14;\n                  break;\n                }\n\n                votingContract = new web3.eth.Contract(Voting.abi, votingData.address);\n                setVoting(votingContract);\n\n                if (!(account !== \"0x0\")) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 12;\n                return fetchUserVotingStatus(account);\n\n              case 12:\n                status = _context.sent;\n                setUserHasVoted(status);\n\n              case 14:\n                _context.next = 19;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"Error loading contract and user's voting status:\", _context.t0);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 16]]);\n      }));\n\n      return function loadVotingContract() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    loadVotingContract();\n  }, [account]);\n  return /*#__PURE__*/React.createElement(VotingContext.Provider, {\n    value: voting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(VotingStatusContext.Provider, {\n    value: userHasVoted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, children));\n} // Define a custom hook to access the user voting status\n\nexport function useUserVotingStatus() {\n  return useContext(VotingStatusContext);\n}","map":{"version":3,"sources":["C:/Users/danie/truffleProjects/ElectionSystem/src/components/VotingContext.js"],"names":["React","createContext","useContext","useState","useEffect","Web3","Voting","VotingContext","useVotingContext","VotingStatusContext","fetchUserVotingStatus","account","web3","window","ethereum","eth","net","getId","networkId","votingData","networks","votingContract","Contract","abi","address","methods","getVoterDetails","call","voterDetails","userHasVoted","hasVoted","console","error","VotingProvider","children","voting","setVoting","setUserHasVoted","loadVotingContract","status","useUserVotingStatus"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport Voting from '../truffle_abis/Voting.json';\r\n\r\nexport const VotingContext = createContext();\r\n\r\nexport function useVotingContext() {\r\n  return useContext(VotingContext);\r\n}\r\n\r\n// Define a new context to manage the voting status\r\nconst VotingStatusContext = createContext();\r\n\r\n// Function to fetch and manage user voting status\r\nexport async function fetchUserVotingStatus(account) {\r\n  try {\r\n    const web3 = new Web3(window.ethereum);\r\n    const networkId = await web3.eth.net.getId();\r\n    const votingData = Voting.networks[networkId];\r\n    const votingContract = new web3.eth.Contract(Voting.abi, votingData.address);\r\n\r\n    const voterDetails = await votingContract.methods.getVoterDetails(account).call();\r\n    const userHasVoted = voterDetails.hasVoted\r\n    return userHasVoted; // Return the status instead of using a state setter\r\n  } catch (error) {\r\n    console.error(\"Error fetching user's voting status:\", error);\r\n    return false; // Return false in case of an error\r\n  }\r\n}\r\n\r\nexport function VotingProvider({ children, account }) {\r\n  const [voting, setVoting] = useState(null);\r\n  const [userHasVoted, setUserHasVoted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const loadVotingContract = async () => {\r\n      try {\r\n        const web3 = new Web3(window.ethereum);\r\n        const networkId = await web3.eth.net.getId();\r\n        const votingData = Voting.networks[networkId];\r\n        if (votingData) {\r\n          const votingContract = new web3.eth.Contract(Voting.abi, votingData.address);\r\n          setVoting(votingContract);\r\n\r\n          if (account !== \"0x0\") {\r\n            const status = await fetchUserVotingStatus(account);\r\n            setUserHasVoted(status);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading contract and user's voting status:\", error);\r\n      }\r\n    };\r\n\r\n    loadVotingContract();\r\n  }, [account]);\r\n\r\n  return (\r\n    <VotingContext.Provider value={voting}>\r\n      <VotingStatusContext.Provider value={userHasVoted}>\r\n        {children}\r\n      </VotingStatusContext.Provider>\r\n    </VotingContext.Provider>\r\n  );\r\n}\r\n\r\n// Define a custom hook to access the user voting status\r\nexport function useUserVotingStatus() {\r\n  return useContext(VotingStatusContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}